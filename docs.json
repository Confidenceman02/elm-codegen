[{"name":"Elm","comment":"\n\n@docs file, toString\n\n\n# Primitives\n\n@docs int, float, char, string, hex, unit\n\n@docs value, valueFrom\n\n@docs list, tuple, triple\n\n@docs record, get\n\n@docs apply, applyFrom\n\n@docs lambda\n\n\n# Top level\n\n@docs declaration, function, functionWith\n\n@docs Module, moduleName, moduleAs\n\n@docs expose, exposeConstructor\n\n\n# Operators\n\n@docs power, multiply, divide, intDivide, modulo, rem, plus, minus, append, cons, equal, notEqual, lt, gt, lte, gte, and, or, pipe, pipeLeft, compose, composeLeft\n\n","unions":[],"aliases":[{"name":"Module","comment":" ","args":[],"type":"Internal.Util.Module"}],"values":[{"name":"and","comment":" `&&`\n","type":"Elm.Expression -> Elm.Expression -> Elm.Expression"},{"name":"append","comment":" `++`\n","type":"Elm.Expression -> Elm.Expression -> Elm.Expression"},{"name":"apply","comment":" ","type":"String.String -> List.List Elm.Expression -> Elm.Expression"},{"name":"applyFrom","comment":" ","type":"Elm.Module -> String.String -> List.List Elm.Expression -> Elm.Expression"},{"name":"char","comment":" ","type":"Char.Char -> Elm.Expression"},{"name":"compose","comment":" `>>`.\n","type":"Elm.Expression -> Elm.Expression -> Elm.Expression"},{"name":"composeLeft","comment":" `<<`\n","type":"Elm.Expression -> Elm.Expression -> Elm.Expression"},{"name":"cons","comment":" `::`\n","type":"Elm.Expression -> Elm.Expression -> Elm.Expression"},{"name":"declaration","comment":" ","type":"String.String -> Elm.Expression -> Elm.Declaration"},{"name":"divide","comment":" `/`.\n","type":"Elm.Expression -> Elm.Expression -> Elm.Expression"},{"name":"equal","comment":" `==`\n","type":"Elm.Expression -> Elm.Expression -> Elm.Expression"},{"name":"expose","comment":" ","type":"Elm.Declaration -> Elm.Declaration"},{"name":"exposeConstructor","comment":" ","type":"Elm.Declaration -> Elm.Declaration"},{"name":"file","comment":" ","type":"Elm.Module -> List.List Elm.Declaration -> Elm.File"},{"name":"float","comment":" ","type":"Basics.Float -> Elm.Expression"},{"name":"function","comment":" ","type":"String.String -> List.List Elm.Pattern -> Elm.Expression -> Elm.Declaration"},{"name":"functionWith","comment":" ","type":"String.String -> List.List ( Elm.Type.Annotation, Elm.Pattern ) -> Elm.Expression -> Elm.Declaration"},{"name":"get","comment":"\n\n    record\n        |> Elm.get \"field\"\n\n    ->\n\n    record.field\n\n_Note_ -\n\n","type":"String.String -> Elm.Expression -> Elm.Expression"},{"name":"gt","comment":" `>`\n","type":"Elm.Expression -> Elm.Expression -> Elm.Expression"},{"name":"gte","comment":" `>=`\n","type":"Elm.Expression -> Elm.Expression -> Elm.Expression"},{"name":"hex","comment":" ","type":"Basics.Int -> Elm.Expression"},{"name":"int","comment":" ","type":"Basics.Int -> Elm.Expression"},{"name":"intDivide","comment":" `//`.\n","type":"Elm.Expression -> Elm.Expression -> Elm.Expression"},{"name":"lambda","comment":" LambdaExpression Lambda\n","type":"List.List Elm.Pattern -> Elm.Expression -> Elm.Expression"},{"name":"list","comment":" ","type":"List.List Elm.Expression -> Elm.Expression"},{"name":"lt","comment":" `<`\n","type":"Elm.Expression -> Elm.Expression -> Elm.Expression"},{"name":"lte","comment":" `<=`\n","type":"Elm.Expression -> Elm.Expression -> Elm.Expression"},{"name":"minus","comment":" `-`\n","type":"Elm.Expression -> Elm.Expression -> Elm.Expression"},{"name":"moduleAs","comment":" A modules name\n\n        Elm.moduleAs\n            [ \"Html\"\n            , \"Attributes\"\n            ]\n            \"Html\"\n\n    will refer to\n\n        Html.Attributes as Html\n\n","type":"List.List String.String -> String.String -> Elm.Module"},{"name":"moduleName","comment":" A modules name\n\n        Elm.moduleName\n            [ \"Html\"\n            , \"Attributes\"\n            ]\n\n    will refer to\n\n        Html.Attributes\n\nNote also that this will force capitalization on each segment to prevent silly errors.\n\n","type":"List.List String.String -> Elm.Module"},{"name":"modulo","comment":" `%`.\n","type":"Elm.Expression -> Elm.Expression -> Elm.Expression"},{"name":"multiply","comment":" `*`.\n","type":"Elm.Expression -> Elm.Expression -> Elm.Expression"},{"name":"notEqual","comment":" `/=`\n","type":"Elm.Expression -> Elm.Expression -> Elm.Expression"},{"name":"or","comment":" `||`\n","type":"Elm.Expression -> Elm.Expression -> Elm.Expression"},{"name":"pipe","comment":" `|>`\n\n    Elm.value \"thang\"\n        |> Elm.pipe (Elm.value \"thang2\")\n        |> Elm.pipe (Elm.value \"thang3\")\n\n    Results in\n\n    thang\n        |> thang2\n        |> thang3\n\n","type":"Elm.Expression -> Elm.Expression -> Elm.Expression"},{"name":"pipeLeft","comment":" `<|`\n","type":"Elm.Expression -> Elm.Expression -> Elm.Expression"},{"name":"plus","comment":" `+`.\n","type":"Elm.Expression -> Elm.Expression -> Elm.Expression"},{"name":"power","comment":" The to-the-power-of operator `^`\n","type":"Elm.Expression -> Elm.Expression -> Elm.Expression"},{"name":"record","comment":" ","type":"List.List ( String.String, Elm.Expression ) -> Elm.Expression"},{"name":"rem","comment":" `rem`.\n","type":"Elm.Expression -> Elm.Expression -> Elm.Expression"},{"name":"string","comment":" ","type":"String.String -> Elm.Expression"},{"name":"toString","comment":" Turn the AST into a pretty printed file\n","type":"Elm.File -> String.String"},{"name":"triple","comment":" ","type":"Elm.Expression -> Elm.Expression -> Elm.Expression -> Elm.Expression"},{"name":"tuple","comment":" ","type":"Elm.Expression -> Elm.Expression -> Elm.Expression"},{"name":"unit","comment":" ","type":"Elm.Expression"},{"name":"value","comment":" ","type":"String.String -> Elm.Expression"},{"name":"valueFrom","comment":" ","type":"Elm.Module -> String.String -> Elm.Expression"}],"binops":[]},{"name":"Elm.Pattern","comment":"\n\n@docs Pattern, all, unit, char, string, int, hex, float\n\n@docs tuple, triple, fields, cons, list, var, named, namedFrom, withAlias\n\n","unions":[],"aliases":[{"name":"Pattern","comment":" ","args":[],"type":"Elm.Syntax.Pattern.Pattern"}],"values":[{"name":"all","comment":" ","type":"Elm.Pattern.Pattern"},{"name":"char","comment":" ","type":"Char.Char -> Elm.Pattern.Pattern"},{"name":"cons","comment":" ","type":"Elm.Pattern.Pattern -> Elm.Pattern.Pattern -> Elm.Pattern.Pattern"},{"name":"fields","comment":" RecordPattern (List (Node String))\n","type":"List.List String.String -> Elm.Pattern.Pattern"},{"name":"float","comment":" ","type":"Basics.Float -> Elm.Pattern.Pattern"},{"name":"hex","comment":" ","type":"Basics.Int -> Elm.Pattern.Pattern"},{"name":"int","comment":" ","type":"Basics.Int -> Elm.Pattern.Pattern"},{"name":"list","comment":" ","type":"List.List Elm.Pattern.Pattern -> Elm.Pattern.Pattern"},{"name":"named","comment":"\n\n        Elm.Pattern.named \"Just\" [ Elm.Pattern.var \"value\" ]\n\n    would result in the following unpacking\n\n        (Just value)\n\n","type":"String.String -> List.List Elm.Pattern.Pattern -> Elm.Pattern.Pattern"},{"name":"namedFrom","comment":" ","type":"Elm.Module -> String.String -> List.List Elm.Pattern.Pattern -> Elm.Pattern.Pattern"},{"name":"string","comment":" ","type":"String.String -> Elm.Pattern.Pattern"},{"name":"triple","comment":" ","type":"Elm.Pattern.Pattern -> Elm.Pattern.Pattern -> Elm.Pattern.Pattern"},{"name":"tuple","comment":" ","type":"Elm.Pattern.Pattern -> Elm.Pattern.Pattern -> Elm.Pattern.Pattern"},{"name":"unit","comment":" ","type":"Elm.Pattern.Pattern"},{"name":"var","comment":" VarPattern String\n","type":"String.String -> Elm.Pattern.Pattern"},{"name":"withAlias","comment":" ","type":"String.String -> Elm.Pattern.Pattern -> Elm.Pattern.Pattern"}],"binops":[]},{"name":"Elm.Type","comment":"\n\n@docs Annotation, var, bool, int, float, string, char, unit\n\n@docs list, tuple, triple, set, dict, maybe, record\n\n","unions":[],"aliases":[{"name":"Annotation","comment":" ","args":[],"type":"Elm.Syntax.TypeAnnotation.TypeAnnotation"}],"values":[{"name":"bool","comment":" A `Bool` type annotation.\n","type":"Elm.Type.Annotation"},{"name":"char","comment":" A `Char` type annotation.\n","type":"Elm.Type.Annotation"},{"name":"dict","comment":" ","type":"Elm.Type.Annotation -> Elm.Type.Annotation -> Elm.Type.Annotation"},{"name":"float","comment":" A `Float` type annotation.\n","type":"Elm.Type.Annotation"},{"name":"int","comment":" An `Int` type annotation.\n","type":"Elm.Type.Annotation"},{"name":"list","comment":" ","type":"Elm.Type.Annotation -> Elm.Type.Annotation"},{"name":"maybe","comment":" Creates a `Maybe` type annotation.\n","type":"Elm.Type.Annotation -> Elm.Type.Annotation"},{"name":"record","comment":" ","type":"List.List ( String.String, Elm.Type.Annotation ) -> Elm.Type.Annotation"},{"name":"set","comment":" ","type":"Elm.Type.Annotation -> Elm.Type.Annotation"},{"name":"string","comment":" A `String` type annotation.\n","type":"Elm.Type.Annotation"},{"name":"triple","comment":" ","type":"Elm.Type.Annotation -> Elm.Type.Annotation -> Elm.Type.Annotation -> Elm.Type.Annotation"},{"name":"tuple","comment":" ","type":"Elm.Type.Annotation -> Elm.Type.Annotation -> Elm.Type.Annotation"},{"name":"unit","comment":" ","type":"Elm.Type.Annotation"},{"name":"var","comment":" A type variable\n","type":"String.String -> Elm.Type.Annotation"}],"binops":[]}]